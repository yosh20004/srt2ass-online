1
00:00:00,980 --> 00:00:03,970
Ok, let's start our discussion on cuda events.

2
00:00:03,990 --> 00:00:11,180
In this video we are going to learn about the basic usages of cuda events, how to declare and manage cuda events and

3
00:00:11,240 --> 00:00:15,530
how to measure time between two cuda events as well.

4
00:00:16,170 --> 00:00:23,710
An event in cuda is essentially a marker in a cuda stream associate with certain point in the flow of operations

5
00:00:23,780 --> 00:00:24,640
in that stream.

6
00:00:25,550 --> 00:00:33,170
Event can be used to synchronize multiple stream executions, monitor device progress and

7
00:00:33,170 --> 00:00:37,740
measuring the execution time of any cuda operation as well.

8
00:00:37,860 --> 00:00:44,940
The cuda API provides function that allows you to insert event at any point in a stream as well as query

9
00:00:45,030 --> 00:00:53,060
for the event completion. An event recorded on a given stream will only be satisfied, that is complete,

10
00:00:53,450 --> 00:01:00,890
when all the proceedings operation in that stream hove completed.  Also remember events is specified

11
00:01:00,980 --> 00:01:06,590
on the default stream applied to all preceding operation in the all the cuda streams.

12
00:01:06,620 --> 00:01:13,370
We will look at each of these usages in a minute. But let's first look at how to perform basic functionalities

13
00:01:13,460 --> 00:01:20,120
associated with event. Basic functions use to mange cuda events are very much analogeous to the

14
00:01:20,180 --> 00:01:22,830
functions we use to manage streams.

15
00:01:23,300 --> 00:01:31,180
You can create cuda event by passing cuda event type pointer to the cudaEventCreate function.

16
00:01:31,180 --> 00:01:37,110
Cuda event can be destroyed by cudaEventDestroy function. If the event has not yet been satisfied

17
00:01:37,140 --> 00:01:38,850
when the cudaEventDestroy function is called,

18
00:01:38,850 --> 00:01:45,940
the call returns immediately, and the resources associated with that event are released automatically

19
00:01:46,180 --> 00:01:49,340
when the event is marked complete.

20
00:01:49,350 --> 00:01:56,850
You can thing cuda event as an operation added to a cuda stream, whose only action when pop from the head of the

21
00:01:56,850 --> 00:02:04,640
working queue, is to raise a host side flag to indicate the completion. An event is queue to

22
00:02:04,920 --> 00:02:12,680
cuda stream usign cudaEventRecord function. The passed event can be used to either wait for or test for

23
00:02:12,860 --> 00:02:17,370
the completion of all the proceedings operation in particular stream.

24
00:02:17,420 --> 00:02:19,060
Waiting for an event blocks the

25
00:02:19,090 --> 00:02:24,610
calling host thread and is performed using cudaEventSynchronize function.

26
00:02:24,710 --> 00:02:30,410
You can test if an event has completed without blocking the host application using cudaEventQuery function.

27
00:02:30,440 --> 00:02:38,730
And you  can measure the elapsed time of a cuda operation marked by two events using

28
00:02:38,790 --> 00:02:41,130
cuda event elapsed time function.

29
00:02:41,200 --> 00:02:48,990
Note cudaEventElapsedTime function returns the time elapsed between event start and stopped beign satisfied

30
00:02:49,290 --> 00:02:53,130
in milliseconds and even start and stop

31
00:02:53,160 --> 00:02:57,430
do not need to be associated with the same cuad stream.

32
00:02:57,690 --> 00:03:04,400
Let me show you an example which highlight these functions and how we can use cuda events to measure

33
00:03:04,410 --> 00:03:07,050
the execution time of a cuda operation.

34
00:03:08,770 --> 00:03:13,890
Ok in this example I'm going to measure the execution time of a kernel.

35
00:03:14,310 --> 00:03:17,820
Here we have the kernel we are going to measure the execution time.

36
00:03:19,660 --> 00:03:23,360
Now let's complate the host code. Here i have

37
00:03:23,490 --> 00:03:25,900
already defined size of a grid,

38
00:03:25,960 --> 00:03:31,530
and block and grid variable. Now we have to create two events.

39
00:03:31,540 --> 00:03:33,290
So here, let me add two cudaEvent type

40
00:03:33,360 --> 00:03:38,700
variables called start and finished. Now we have to create these events.

41
00:03:38,710 --> 00:03:44,950
For that we can use cudaEventCreate function with above declared variables.

42
00:03:44,950 --> 00:03:49,210
Ok, here we need to measure the execution time of our kernel.

43
00:03:49,450 --> 00:03:51,400
So here's what I'm going to do.

44
00:03:51,430 --> 00:03:56,350
I'm going to push one event, start event into the null stream before launching ourt kernel.

45
00:03:56,650 --> 00:04:03,010
And then after launching the kernel I'm going to push end event. And then we can wait until end event to

46
00:04:03,010 --> 00:04:07,970
pop from the work queue and measure the time between the start and end event.

47
00:04:08,320 --> 00:04:14,520
So here, let me push the start event to the stream using cuda event record function.

48
00:04:14,770 --> 00:04:22,210
Then we can launch our kernel in to the default stream. And then we can push end event to the default stream using

49
00:04:22,480 --> 00:04:24,110
cudaEventRecord function again.

50
00:04:24,110 --> 00:04:29,400
Now we have to wait until end event is execute in the stream.

51
00:04:29,650 --> 00:04:34,110
So here, we have to use cudaEventSynchronize function with end event.

52
00:04:34,720 --> 00:04:39,600
This function will block the host execution until end event reach in the stream.

53
00:04:40,960 --> 00:04:47,720
Then we can measure the elapsed time between start time and end event using cudaElapsedTime function.

54
00:04:48,440 --> 00:04:49,610
For this function,

55
00:04:49,640 --> 00:04:54,740
We have to provide float to store the elapsed time in milliseconds and two events.

56
00:04:54,920 --> 00:04:57,480
So let me declare a float type variable here.

57
00:04:57,770 --> 00:05:03,500
No we can pass float variable, start event and end event as the argument in this way

58
00:05:03,530 --> 00:05:07,960
to our cudaEventElapsedTime function. Then let's

59
00:05:08,030 --> 00:05:18,610
printout the elapsed time here.

60
00:05:18,660 --> 00:05:21,780
Finally we have to reclaim the memory allocated to cuda events

61
00:05:21,870 --> 00:05:24,810
using cudaEventDestroy funciton.

62
00:05:25,080 --> 00:05:27,740
Ok let me on this example now.

63
00:05:28,260 --> 00:05:32,840
Ok, here you can see our program have printed out the execution time.

64
00:05:33,240 --> 00:05:39,510
So far, we have measure the execution time by recording clock cycles before and after and operatio and

65
00:05:39,510 --> 00:05:41,670
taking the difference between them.

66
00:05:42,270 --> 00:05:49,530
You can add that timing mechanism here, and check whether the execution times we got from cudaEvent are same as the

67
00:05:49,530 --> 00:05:51,620
execution time of that method.

68
00:05:52,050 --> 00:05:54,670
If you do that you will realize the time acquired using

69
00:05:54,720 --> 00:06:00,900
both the methods are pretty similar. And the error is always with in one milliseond range.
